{"version":3,"sources":["Texts.tsx","display/CollectionDisplay/CollectionDisplay.tsx","generate/QuestionGenerator.ts","generate/Random.ts","generate/PuzzleImageMapper.ts","generate/WorksheetGenerator.ts","display/ConfigurationDisplay/ConfigurationDisplay.tsx","display/DifficultyDisplay/DifficultyDisplay.tsx","display/DigitDisplay/DigitsDisplay.tsx","display/PuzzleWordMap/PuzzleWordMap.tsx","display/QuestionDisplay/QuestionDisplay.tsx","display/ResponseImageDisplay/ResponseImageDisplay.tsx","display/WorkSheetDisplay/WorkSheetDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TEXTS","texts","href","title","images","Texts","key","template","this","translated","params","forEach","param","index","replace","type","category","undefined","item","text","locale","maxLabelLength","allImageKeys","map","imageLabel","filter","w","length","aCategory","Object","keys","name","label","Operator","CollectionDisplay","useState","setTitle","className","placeholder","onChange","input","target","value","onClick","window","print","allImages","imageItem","src","process","alt","Random","minInclusive","maxInclusive","Math","round","random","except","from","tryCount","listIndex","interval","word","letterIndex","letter","indexOf","list","maxLength","included","remaining","result","items","splice","flip","push","unshift","PuzzleImageMapper","questions","image","puzzleWord","questionIndexToLetterMap","Map","letterToResultMap","allQuestionIndexes","Array","_","remainingIndexes","indexesToPickFrom","indexIndex","randomIndex","set","AdditionQuestionGenerator","config","allowZero","resultInterval","resultMaxValue","first","second","operator","PLUS","SubtractionQuestionGenerator","MINUS","MAXIMUM_RESULT_VALUE_LIST","MAXIMUM_TEXT_LENGTH_LIST","WorksheetGenerator","questionGenerators","additionQuestionConfig","enabled","subtractionQuestionConfig","maxTextLength","console","warn","randomImage","puzzleImage","showUppercase","toUpperCase","generateQuestions","puzzleImageMap","entries","questionIndex","mappedLetter","question","letterExcept","imagesWithoutPickedPuzzleImage","responseImagesSlice","slice","maxResponseImages","difficulty","calculateDifficulty","q","pickRandomQuestionGenerator","generate","some","lq","numberOfQuestions","raw","v","min","ConfigurationDisplay","noValidate","onSubmit","parseInt","checked","showAnswers","to","DifficultyDisplay","isOn","DigitsDisplay","hiddenOnPrint","hidden","minLength","digits","padStart","split","digit","PuzzleWordMap","showResults","puzzleWordLetters","mappedResult","get","QuestionDisplay","mappedLetterWithRandomFallback","ResponseImageDisplay","WorkSheetDisplay","workSheet","App","setConfig","useEffect","document","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"ybAeMA,EAEF,CACF,QAAW,CACTC,MAAO,CAEL,MAAS,CACP,GAAM,8BACN,GAAM,sBAER,+BAAgC,CAC9B,GAAM,UACN,GAAM,WAER,kBAAmB,CACjB,GAAM,aACN,GAAM,YAER,6BAA8B,CAC5B,GAAM,kCACN,GAAM,uBAER,6BAA8B,CAC5B,GAAM,2BACN,GAAM,uBAER,mBAAoB,CAClB,GAAM,YACN,GAAM,aAER,2BAA4B,CAC1B,GAAM,cACN,GAAM,qBAER,2CAA4C,CAC1C,GAAM,2CACN,GAAM,qCAER,uBAAwB,CACtB,GAAM,UACN,GAAM,YAER,sBAAuB,CACrB,GAAM,cACN,GAAM,WAER,mCAAoC,CAClC,GAAM,+BACN,GAAM,wBAER,yBAA0B,CACxB,GAAM,eACN,GAAM,cAER,0BAA2B,CACzB,GAAM,eACN,GAAM,eAER,+BAAgC,CAC9B,GAAM,iBACN,GAAM,WAER,sBAAuB,CACrB,GAAM,2EACN,GAAM,iDAER,oBAAqB,CACnB,GAAM,aACN,GAAM,cAER,eAAgB,CACd,GAAM,gBACN,GAAM,SAER,mBAAoB,CAClB,GAAM,8BACN,GAAM,oBAIR,kBAAmB,CACjB,GAAM,8BACN,GAAM,oBAER,iBAAkB,CAChB,GAAM,2GACN,GAAM,qFAER,iBAAkB,CAChB,GAAM,wEACN,GAAM,kDAER,iBAAkB,CAChB,GAAM,mDACN,GAAM,+CAER,aAAgB,CACd,GAAM,sDAAwB,mBAAGC,KAAK,0BAA0BC,MAAM,UAAxC,qBAAxB,UAA4F,mBAAGD,KAAK,4BAA4BC,MAAM,WAA1C,iCAClG,GAAM,kDAAoB,mBAAGD,KAAK,0BAA0BC,MAAM,UAAxC,qBAApB,SAAuF,mBAAGD,KAAK,4BAA4BC,MAAM,WAA1C,kCAI/F,mBAAoB,CAClB,GAAM,qCACN,GAAM,2BAGVC,OAAQ,CACN,IAAO,CACL,GAAM,MACN,GAAM,UAER,KAAQ,CACN,GAAM,OACN,GAAM,OAER,IAAO,CACL,GAAM,MACN,GAAM,eAER,UAAa,CACX,GAAM,YACN,GAAM,WAER,MAAS,CACP,GAAM,QACN,GAAM,oBAER,IAAO,CACL,GAAM,MACN,GAAM,eAER,UAAa,CACX,GAAM,YACN,GAAM,YAER,QAAW,CACT,GAAM,UACN,GAAM,mBAER,UAAa,CACX,GAAM,YACN,GAAM,oBAER,IAAO,CACL,GAAM,MACN,GAAM,aAER,KAAQ,CACN,GAAM,OACN,GAAM,QAER,UAAa,CACX,GAAM,YACN,GAAM,YAER,IAAO,CACL,GAAM,MACN,GAAM,YAER,QAAW,CACT,GAAM,UACN,GAAM,UAER,KAAQ,CACN,GAAM,OACN,GAAM,kBAER,SAAY,CACV,GAAM,WACN,GAAM,WAER,SAAY,CACV,GAAM,WACN,GAAM,YAER,IAAO,CACL,GAAM,MACN,GAAM,SAER,KAAQ,CACN,GAAM,OACN,GAAM,gBAER,QAAW,CACT,GAAM,UACN,GAAM,eAER,SAAY,CACV,GAAM,WACN,GAAM,UAER,aAAgB,CACd,GAAM,eACN,GAAM,aAER,MAAS,CACP,GAAM,QACN,GAAM,OAER,SAAY,CACV,GAAM,WACN,GAAM,UAER,MAAS,CACP,GAAM,QACN,GAAM,SAER,KAAQ,CACN,GAAM,OACN,GAAM,OAER,MAAS,CACP,GAAM,QACN,GAAM,aAER,YAAa,CACX,GAAM,YACN,GAAM,uBAER,OAAU,CACR,GAAM,SACN,GAAM,qBAER,MAAS,CACP,GAAM,QACN,GAAM,gBAER,QAAW,CACT,GAAM,UACN,GAAM,wBAER,IAAO,CACL,GAAM,MACN,GAAM,qBAER,QAAW,CACT,GAAM,UACN,GAAM,gBAER,OAAU,CACR,GAAM,SACN,GAAM,WAER,QAAW,CACT,GAAM,UACN,GAAM,WAER,IAAO,CACL,GAAM,MACN,GAAM,QAER,aAAc,CACZ,GAAM,aACN,GAAM,aAER,OAAU,CACR,GAAM,SACN,GAAM,UAER,SAAY,CACV,GAAM,WACN,GAAM,OAER,MAAS,CACP,GAAM,QACN,GAAM,WAER,MAAS,CACP,GAAM,QACN,GAAM,UAER,MAAS,CACP,GAAM,QACN,GAAM,cAER,MAAS,CACP,GAAM,QACN,GAAM,QAER,MAAS,CACP,GAAM,QACN,GAAM,cAER,SAAY,CACV,GAAM,WACN,GAAM,sBAER,MAAS,CAC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","file":"static/js/main.fc0be396.chunk.js","sourcesContent":["import {ReactNode} from 'react'\n\nexport type Category = {\n  texts: {\n    [key: string]: {\n      [locale: string]: ReactNode\n    }\n  }\n  images: {\n    [name: string]: {\n      [locale: string]: string\n    }\n  }\n}\n\nconst TEXTS: {\n  [category: string]: Category\n} = {\n  'animals': {\n    texts: {\n      // config\n      'title': {\n        'ro': 'Puzzle matematic cu animale',\n        'en': 'Animal Math Puzzle',\n      },\n      'config-section-title-general': {\n        'ro': 'General',\n        'en': 'General',\n      },\n      'config-language': {\n        'ro': 'Limbă',\n        'en': 'Language',\n      },\n      'config-number-of-questions': {\n        'ro': 'Număr de întrebări',\n        'en': 'Number of questions',\n      },\n      'config-maximum-name-length': {\n        'ro': 'Lungime maximă nume',\n        'en': 'Maximum name length',\n      },\n      'config-unlimited': {\n        'ro': 'Nelimitat',\n        'en': 'Unlimited',\n      },\n      'config-uppercase-letters': {\n        'ro': 'Litere mari',\n        'en': 'Uppercase letters',\n      },\n      'config-maximum-number-of-response-images': {\n        'ro': 'Număr maxim de imagini răspuns',\n        'en': 'Maximum number of response images',\n      },\n      'config-qgen-addition': {\n        'ro': 'Adunare',\n        'en': 'Addition',\n      },\n      'config-qgen-enabled': {\n        'ro': 'Activă',\n        'en': 'Enabled',\n      },\n      'config-qgen-result-maximum-value': {\n        'ro': 'Valoare maximă rezultat',\n        'en': 'Result maximum value',\n      },\n      'config-qgen-allow-zero': {\n        'ro': 'Permite zero',\n        'en': 'Allow zero',\n      },\n      'config-qgen-subtraction': {\n        'ro': 'Scădere',\n        'en': 'Subtraction',\n      },\n      'config-section-title-preview': {\n        'ro': 'Previzualizare',\n        'en': 'Preview',\n      },\n      'config-show-answers': {\n        'ro': 'Afișare răspunsuri la previzualizare (nu vor fi tipărite)',\n        'en': 'Show answers on preview (will not be printed)',\n      },\n      'config-regenerate': {\n        'ro': 'Regenerare',\n        'en': 'Regenerate',\n      },\n      'config-print': {\n        'ro': 'Tipărire',\n        'en': 'Print',\n      },\n      'print-collection': {\n        'ro': 'Tipărire colecție',\n        'en': 'Print collection'\n      },\n\n      // worksheet\n      'worksheet-title': {\n        'ro': 'Găsește animalul!',\n        'en': 'Find the animal!',\n      },\n      'instructions-1': {\n        'ro': '1. Rezolvă fiecare operație aritmetică și scrie rezultatul în spațiile gole:',\n        'en': '1. Solve each arithmetic challenge and write down the result in the empty spaces:',\n      },\n      'instructions-2': {\n        'ro': '2. Completează literele corespunzătoare răspunsurilor:',\n        'en': '2. Fill in the letters that match the answers:',\n      },\n      'instructions-3': {\n        'ro': '3. Citește numele! Ce animal ai găsit?',\n        'en': '3. Read the name! What animal did you find?',\n      },\n      'attributions': {\n        'ro': <span>Imagini create de <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> de la <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></span>,\n        'en': <span>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></span>,\n      },\n\n      // collection\n      'collection-title': {\n        'ro': 'Colecția de animale pentru $1',\n        'en': '$1\\'s Animal Collection',\n      }\n    },\n    images: {\n      'bat': {\n        'en': 'Bat',\n        'ro': 'Liliac',\n      },\n      'bear': {\n        'en': 'Bear',\n        'ro': 'Urs',\n      },\n      'bee': {\n        'en': 'Bee',\n        'ro': 'Albină',\n      },\n      'butterfly': {\n        'en': 'Butterfly',\n        'ro': 'Fluture',\n      },\n      'camel': {\n        'en': 'Camel',\n        'ro': 'Cămilă',\n      },\n      'cat': {\n        'en': 'Cat',\n        'ro': 'Pisică',\n      },\n      'chameleon': {\n        'en': 'Chameleon',\n        'ro': 'Cameleon',\n      },\n      'chicken': {\n        'en': 'Chicken',\n        'ro': 'Găină',\n      },\n      'clownfish': {\n        'en': 'Clownfish',\n        'ro': 'Pește clovn',\n      },\n      'cow': {\n        'en': 'Cow',\n        'ro': 'Vacă',\n      },\n      'crab': {\n        'en': 'Crab',\n        'ro': 'Crab',\n      },\n      'crocodile': {\n        'en': 'Crocodile',\n        'ro': 'Crocodil',\n      },\n      'dog': {\n        'en': 'Dog',\n        'ro': 'Câine',\n      },\n      'dolphin': {\n        'en': 'Dolphin',\n        'ro': 'Delfin',\n      },\n      'duck': {\n        'en': 'Duck',\n        'ro': 'Rață',\n      },\n      'elephant': {\n        'en': 'Elephant',\n        'ro': 'Elefant',\n      },\n      'flamingo': {\n        'en': 'Flamingo',\n        'ro': 'Flamingo',\n      },\n      'fox': {\n        'en': 'Fox',\n        'ro': 'Vulpe',\n      },\n      'frog': {\n        'en': 'Frog',\n        'ro': 'Broască',\n      },\n      'giraffe': {\n        'en': 'Giraffe',\n        'ro': 'Girafă',\n      },\n      'hedgehog': {\n        'en': 'Hedgehog',\n        'ro': 'Bursuc',\n      },\n      'hippopotamus': {\n        'en': 'Hippopotamus',\n        'ro': 'Hipopotam',\n      },\n      'horse': {\n        'en': 'Horse',\n        'ro': 'Cal',\n      },\n      'kangaroo': {\n        'en': 'Kangaroo',\n        'ro': 'Cangur',\n      },\n      'koala': {\n        'en': 'Koala',\n        'ro': 'Koala',\n      },\n      'lion': {\n        'en': 'Lion',\n        'ro': 'Leu',\n      },\n      'llama': {\n        'en': 'Llama',\n        'ro': 'Lamă'\n      },\n      'manta-ray': {\n        'en': 'Manta ray',\n        'ro': 'Pisică de mare',\n      },\n      'monkey': {\n        'en': 'Monkey',\n        'ro': 'Maimuță',\n      },\n      'mouse': {\n        'en': 'Mouse',\n        'ro': 'Șoarece',\n      },\n      'octopus': {\n        'en': 'Octopus',\n        'ro': 'Caracatiță',\n      },\n      'owl': {\n        'en': 'Owl',\n        'ro': 'Bufniță',\n      },\n      'panther': {\n        'en': 'Panther',\n        'ro': 'Panteră',\n      },\n      'parrot': {\n        'en': 'Parrot',\n        'ro': 'Papagal',\n      },\n      'penguin': {\n        'en': 'Penguin',\n        'ro': 'Pinguin',\n      },\n      'pig': {\n        'en': 'Pig',\n        'ro': 'Porc',\n      },\n      'polar-bear': {\n        'en': 'Polar bear',\n        'ro': 'Urs polar',\n      },\n      'rabbit': {\n        'en': 'Rabbit',\n        'ro': 'Iepure',\n      },\n      'reindeer': {\n        'en': 'Reindeer',\n        'ro': 'Ren',\n      },\n      'rhino': {\n        'en': 'Rhino',\n        'ro': 'Rinocer',\n      },\n      'shark': {\n        'en': 'Shark',\n        'ro': 'Rechin',\n      },\n      'sloth': {\n        'en': 'Sloth',\n        'ro': 'Leneș',\n      },\n      'snail': {\n        'en': 'Snail',\n        'ro': 'Melc',\n      },\n      'snake': {\n        'en': 'Snake',\n        'ro': 'Șarpe',\n      },\n      'squirrel': {\n        'en': 'Squirrel',\n        'ro': 'Veveriță',\n      },\n      'tiger': {\n        'en': 'Tiger',\n        'ro': 'Tigru',\n      },\n      'turtle': {\n        'en': 'Turtle',\n        'ro': 'Broască țestoasă',\n      },\n      'whale': {\n        'en': 'Whale',\n        'ro': 'Balenă',\n      },\n      'wolf': {\n        'en': 'Wolf',\n        'ro': 'Lup',\n      },\n    },\n  },\n}\n\nexport type ImageItem = {\n  name: string\n  label: string\n}\n\nexport class Texts {\n  static category: keyof typeof TEXTS = 'animals'\n  static locale = 'en'\n\n  /**\n   * Gets the translated text, for the current locale, optionally replacing parameters.\n   * Examples:\n   *  Texts.text('title')\n   *    where title for the current local is defined as 'Animal Puzzle Math'\n   *    > returns 'Animal Puzzle Math'\n   *  Texts.text('collection-title', 'YURI')\n   *    where title for the current local is defined as '$1\\'s Animals Collection'\n   *    > returns 'YURI's Animals Collection'\n   * @param key the text key\n   * @param params list of parameters in the form $N, starting with 1, for example $1\n   */\n  static text(key: keyof typeof TEXTS['animals']['texts'], ...params: string[]): string {\n    let template = this.translated('texts', key as string) as string\n    params.forEach((param, index) => template = template.replace(`$${index + 1}`, param))\n    return template\n  }\n\n  static imageLabel(key: keyof typeof TEXTS['animals']['images']): string {\n    return this.translated('images', key as string) as string\n  }\n\n  static translated(type: 'images' | 'texts', key: string ): ReactNode | string {\n    const category = TEXTS[this.category]\n    if (category === undefined) {\n      return key\n    }\n    const item = category[type][key]\n    if (item === undefined) {\n      return key\n    }\n    const text = item[this.locale]\n    if (text === undefined) {\n      return item['en']\n    }\n    return text\n  }\n\n  static allLabels(maxLabelLength: number = 1001): string[] {\n    return this.allImageKeys().map(this.imageLabel).filter(w => w.length <= maxLabelLength)\n  }\n\n  static allImageKeys(): string[] {\n    const aCategory = TEXTS['animals']\n    return Object.keys(aCategory['images'])\n  }\n\n  static allImages(): ImageItem[] {\n    return this.allImageKeys().map(key => ({name: key, label: this.imageLabel(key)}))\n  }\n}\n","import './CollectionDisplay.scss'\nimport React, {useState} from 'react'\nimport {Texts} from '../../Texts'\n\nexport const CollectionDisplay = () => {\n  const [title, setTitle] = useState(Texts.text('collection-title',  ''))\n  return (\n    <div className=\"Collection\">\n      <div className=\"Collection--Print\">\n        <div className=\"Collection--Name\">\n          <input type=\"text\" placeholder=\"Name\" onChange={input => setTitle(Texts.text('collection-title', input.target.value))} />\n        </div>\n        <button type=\"button\" className=\"Button\" onClick={window.print}>\n          <span className=\"Button--Icon\">⎙</span>\n          <span className=\"Button--Text\">{Texts.text('config-print')}</span>\n        </button>\n      </div>\n\n      <div className=\"Collection--Page\">\n        <h1 className=\"Collection--Title\">{title}</h1>\n        <div className=\"Collection--Images\">\n          {Texts.allImages().map(imageItem =>\n            <div key={imageItem.name} className=\"Collection--Image\">\n              <img src={`${process.env.PUBLIC_URL}/assets/animals/${imageItem.name}.svg`} alt={imageItem.label} />\n              <span>{imageItem.label}</span>\n            </div>\n          )}\n        </div>\n        <p className=\"Collection--Attributions\">{Texts.text('attributions')}</p>\n      </div>\n    </div>\n  )\n}\n","import {Random} from './Random'\n\nexport enum Operator {\n  PLUS = '+',\n  MINUS = '-'\n}\n\nexport type Question = {\n  first: number,\n  operator: Operator\n  second: number,\n  result: number\n  mappedLetter?: string | undefined\n}\n\nexport interface QuestionGenerator {\n  generate(): Question\n}\n\nexport interface QuestionGeneratorConfigType {\n  enabled: boolean\n}\n\nexport interface AdditionQuestionConfig extends QuestionGeneratorConfigType {\n  resultMaxValue: number,\n  allowZero: boolean\n}\n\nexport class AdditionQuestionGenerator implements QuestionGenerator {\n  constructor(public readonly config: AdditionQuestionConfig) { }\n\n  generate(): Question {\n    const allowZero = this.config.allowZero\n    const resultInterval = [allowZero ? 1 : 2, this.config.resultMaxValue]\n    const result = Random.interval(resultInterval[0], resultInterval[1])\n    const first = Random.interval(allowZero ? 0 : 1, result - (allowZero ? 0 : 1))\n    const second = result - first\n    return {\n      first,\n      operator: Operator.PLUS,\n      second,\n      result\n    }\n  }\n}\n\nexport interface SubtractionQuestionConfig extends QuestionGeneratorConfigType {\n  resultMaxValue: number,\n  allowZero: boolean\n}\n\nexport class SubtractionQuestionGenerator implements QuestionGenerator {\n  constructor(public readonly config: SubtractionQuestionConfig) { }\n\n  generate(): Question {\n    const allowZero = this.config.allowZero\n    const first = Random.interval(allowZero ? 0 : 2, this.config.resultMaxValue)\n    const result = Random.interval(allowZero ? 0 : 1, first - (allowZero ? 0 : 1))\n    const second = first - result\n    return {\n      first,\n      operator: Operator.MINUS,\n      second,\n      result\n    }\n  }\n}","export class Random {\n  static interval(minInclusive: number, maxInclusive: number): number {\n    return minInclusive + Math.round(Math.random() * (maxInclusive - minInclusive))\n  }\n\n  static flip(): boolean {\n    return Math.random() < 0.5\n  }\n\n  static letterExcept(except: string, from: string = 'ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz') {\n    let tryCount = 100\n    do {\n      tryCount--\n      const listIndex = this.interval(0, from.length - 1)\n      const word = from[listIndex]\n      const letterIndex = this.interval(0, word.length - 1)\n      const letter = word[letterIndex]\n      if (except.indexOf(letter) === -1 || tryCount < 0) {\n        return letter\n      }\n    } while (true)\n  }\n\n  /**\n   * Extracts a slice of random items picked from a list, with an always included item.\n   * @param list the list of items to pick from\n   * @param maxLength the final maximum length of the list (can be smaller if not enough items)\n   * @param included the always included item\n   */\n  static slice<T>(list: T[], maxLength: number, included: T): T[] {\n    const remaining = [...list]\n    const result: T[] = [included]\n    while (result.length !== maxLength && 0 < remaining.length) {\n      const index = this.interval(0, remaining.length - 1)\n      const items = remaining.splice(index, 1)\n      if (this.flip()) {\n        result.push(...items)\n      } else {\n        result.unshift(...items)\n      }\n    }\n    return result\n  }\n}\n","import {ImageItem} from '../Texts'\nimport {Question} from './QuestionGenerator'\nimport {Random} from './Random'\n\nexport type PuzzleImageMap = {\n  image: ImageItem\n  questionIndexToLetterMap: Map<number, string>\n  letterToResultMap: Map<string, number>\n}\n\nexport class PuzzleImageMapper {\n  static map(questions: Question[], image: ImageItem): PuzzleImageMap {\n    const puzzleWord = image.label\n    const questionIndexToLetterMap = new Map<number, string>()\n    const letterToResultMap = new Map<string, number>()\n    const allQuestionIndexes = Array.from({length: questions.length}).map((_, index) => index)\n    const remainingIndexes = allQuestionIndexes\n    for (const letter of puzzleWord) {\n      let indexesToPickFrom = remainingIndexes\n      if (indexesToPickFrom.length === 0) {\n        indexesToPickFrom = allQuestionIndexes\n      }\n      const indexIndex = Random.interval(0, indexesToPickFrom.length - 1)\n      const randomIndex = indexesToPickFrom[indexIndex]\n      questionIndexToLetterMap.set(randomIndex, letter)\n      letterToResultMap.set(letter, questions[randomIndex].result)\n      remainingIndexes.splice(indexIndex, 1)\n    }\n    return {\n      image,\n      questionIndexToLetterMap,\n      letterToResultMap,\n    }\n  }\n}\n","import {PuzzleImageMap, PuzzleImageMapper} from './PuzzleImageMapper'\nimport {\n  AdditionQuestionConfig,\n  AdditionQuestionGenerator, Question,\n  QuestionGenerator,\n  SubtractionQuestionConfig,\n  SubtractionQuestionGenerator\n} from './QuestionGenerator'\nimport {Random} from './Random'\nimport {ImageItem, Texts} from '../Texts'\n\nexport type WorksheetConfig = {\n  locale: string\n  numberOfQuestions: number\n  additionQuestionConfig: AdditionQuestionConfig\n  subtractionQuestionConfig: SubtractionQuestionConfig\n  maxTextLength: number\n  maxResponseImages: number\n  showUppercase: boolean\n  showAnswers: boolean\n}\n\nexport const MAXIMUM_RESULT_VALUE_LIST = [10, 15, 20, 30, 50, 100]\nexport const MAXIMUM_TEXT_LENGTH_LIST = [4, 5, 6, 7, 8, 1001]\n\nexport type WorkSheet = {\n  questions: Question[]\n  puzzleImageMap: PuzzleImageMap\n  responseImagesSlice: ImageItem[]\n  config: WorksheetConfig\n  difficulty: number\n}\n\nexport class WorksheetGenerator {\n  private readonly questionGenerators: QuestionGenerator[]\n\n  constructor(public readonly config: WorksheetConfig) {\n    this.questionGenerators = []\n    if (config.additionQuestionConfig.enabled) {\n      this.questionGenerators.push(new AdditionQuestionGenerator(config.additionQuestionConfig))\n    }\n    if (config.subtractionQuestionConfig.enabled) {\n      this.questionGenerators.push(new SubtractionQuestionGenerator(config.subtractionQuestionConfig))\n    }\n\n    if (this.questionGenerators.length === 0) {\n      this.questionGenerators.push(new AdditionQuestionGenerator(config.additionQuestionConfig))\n    }\n  }\n\n  generate(): WorkSheet {\n    const allImages = Texts.allImages()\n    let images = allImages.filter(image => image.label.length <= this.config.maxTextLength)\n    if (images.length === 0) {\n      console.warn(`Cannot find word with maxim length ${this.config.maxTextLength}, falling back to all words`)\n      images = allImages\n    }\n    const randomImageIndex = Random.interval(0, images.length - 1)\n    const randomImage = images[randomImageIndex]\n    const puzzleImage = {\n      ...randomImage,\n      label: this.config.showUppercase ? randomImage.label.toUpperCase() : randomImage.label\n    }\n    const questions = this.generateQuestions()\n    const puzzleImageMap = PuzzleImageMapper.map(questions, puzzleImage)\n    Array\n      .from(puzzleImageMap.questionIndexToLetterMap.entries())\n      .forEach(([questionIndex, letter]) => questions[questionIndex].mappedLetter = letter)\n    questions.forEach(question => {\n      if (question.mappedLetter === undefined) {\n        question.mappedLetter = Random.letterExcept(puzzleImage.label)\n        if (this.config.showUppercase) {\n          question.mappedLetter = question.mappedLetter.toUpperCase()\n        }\n      }\n    })\n    const imagesWithoutPickedPuzzleImage = images.filter(image => image.label !== randomImage.label)\n    const responseImagesSlice = Random.slice(imagesWithoutPickedPuzzleImage, this.config.maxResponseImages, puzzleImage)\n      .map(image => ({\n        ...image,\n        label: this.config.showUppercase ? image.label.toUpperCase() : image.label\n      }))\n    return {\n      questions,\n      puzzleImageMap,\n      responseImagesSlice,\n      config: this.config,\n      difficulty: this.calculateDifficulty()\n    }\n  }\n\n  generateQuestions(): Array<Question> {\n    const list: Question[] = []\n    let tryCount = 100\n    do {\n      tryCount--\n      const questionGenerator = this.pickRandomQuestionGenerator()\n      const q = questionGenerator.generate()\n      const isSameResult = list.some(lq => lq.result === q.result)\n      if (isSameResult && 0 < tryCount) {\n        continue\n      }\n      list.push(q)\n    } while (list.length !== this.config.numberOfQuestions)\n    return list\n  }\n\n  private pickRandomQuestionGenerator() {\n    const randomIndex = Random.interval(0, this.questionGenerators.length - 1)\n    return this.questionGenerators[randomIndex]\n  }\n\n  private calculateDifficulty() {\n    let raw = 1\n\n    if (!this.config.showUppercase) {\n      raw += 0.5\n    }\n\n    if (this.config.subtractionQuestionConfig.enabled) {\n      raw += 1\n    }\n\n    MAXIMUM_TEXT_LENGTH_LIST.forEach(v => {\n      if (v < this.config.maxTextLength) {\n        raw += 0.25\n      }\n    })\n\n    MAXIMUM_RESULT_VALUE_LIST.forEach(v => {\n      if (v < this.config.additionQuestionConfig.resultMaxValue ||\n        v < this.config.subtractionQuestionConfig.resultMaxValue) {\n        raw += 0.5\n      }\n    })\n\n    return Math.min(5, raw)\n  }\n}\n","import './ConfigurationDisplay.scss'\nimport React from 'react'\nimport {Link} from 'react-router-dom'\nimport {WorksheetConfig, MAXIMUM_RESULT_VALUE_LIST, MAXIMUM_TEXT_LENGTH_LIST} from '../../generate/WorksheetGenerator'\nimport {Texts} from '../../Texts'\n\ntype Props = {\n  config: WorksheetConfig\n  onChange: (config: WorksheetConfig) => void\n}\n\nexport const ConfigurationDisplay = ({config, onChange}: Props) => {\n  return (\n    <form className=\"Configuration\" noValidate onSubmit={() => {}}>\n      <h1>{Texts.text('title')}</h1>\n\n      <h2>{Texts.text('config-section-title-general')}</h2>\n\n      <label>\n        <span>{Texts.text('config-language')}</span>\n        <select\n          value={config.locale}\n          onChange={input => onChange({...config, locale: input.target.value})}\n        >\n          <option value=\"en\">English</option>\n          <option value=\"ro\">Română</option>\n        </select>\n      </label>\n\n      <label>\n        <span>{Texts.text('config-number-of-questions')}</span>\n        <select\n          value={config.numberOfQuestions}\n          onChange={input => onChange({...config, numberOfQuestions: parseInt(input.target.value, 10)})}\n        >\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n          <option value=\"6\">6</option>\n          <option value=\"7\">7</option>\n          <option value=\"8\">8</option>\n          <option value=\"9\">9</option>\n          <option value=\"10\">10</option>\n        </select>\n      </label>\n\n      <label>\n        <span>{Texts.text('config-maximum-name-length')}</span>\n        <select\n          value={config.maxTextLength}\n          onChange={input => onChange({...config, maxTextLength: parseInt(input.target.value, 10)})}\n        >\n          {MAXIMUM_TEXT_LENGTH_LIST.map(v =>\n            <option key={v} value={v}>{v < 1001 ? v : Texts.text('config-unlimited')}</option>\n          )}\n        </select>\n      </label>\n\n      <label className=\"Label--Checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={config.showUppercase}\n          onChange={input => onChange({...config, showUppercase: input.target.checked})}\n        />\n        <span>{Texts.text('config-uppercase-letters')}</span>\n      </label>\n\n      <label>\n        <span>{Texts.text('config-maximum-number-of-response-images')}</span>\n        <select\n          value={config.maxResponseImages}\n          onChange={input => onChange({...config, maxResponseImages: parseInt(input.target.value, 10)})}\n        >\n          <option value=\"5\">5</option>\n          <option value=\"10\">10</option>\n          <option value=\"15\">15</option>\n          <option value=\"20\">20</option>\n        </select>\n      </label>\n\n      <h2>{Texts.text('config-qgen-addition')}</h2>\n\n      <label className=\"Label--Checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={config.additionQuestionConfig.enabled}\n          onChange={input => onChange({\n            ...config,\n            additionQuestionConfig: {\n              ...config.additionQuestionConfig,\n              enabled: input.target.checked\n            }\n          })}\n        />\n        <span>{Texts.text('config-qgen-enabled')}</span>\n      </label>\n\n      <label>\n        <span>{Texts.text('config-qgen-result-maximum-value')}</span>\n        <select\n          value={config.additionQuestionConfig.resultMaxValue}\n          onChange={input => onChange({\n            ...config,\n            additionQuestionConfig: {\n              ...config.additionQuestionConfig,\n              resultMaxValue: parseInt(input.target.value)\n            }\n          })}\n        >\n          {MAXIMUM_RESULT_VALUE_LIST.map(v =>\n            <option key={v} value={v}>{v}</option>\n          )}\n        </select>\n      </label>\n\n      <label className=\"Label--Checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={config.additionQuestionConfig.allowZero}\n          onChange={input => onChange({\n            ...config,\n            additionQuestionConfig: {\n              ...config.additionQuestionConfig,\n              allowZero: input.target.checked\n            }\n          })}\n        />\n        <span>{Texts.text('config-qgen-allow-zero')}</span>\n      </label>\n\n      <h2>{Texts.text('config-qgen-subtraction')}</h2>\n\n      <label className=\"Label--Checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={config.subtractionQuestionConfig.enabled}\n          onChange={input => onChange({\n            ...config,\n            subtractionQuestionConfig: {\n              ...config.subtractionQuestionConfig,\n              enabled: input.target.checked\n            }\n          })}\n        />\n        <span>{Texts.text('config-qgen-enabled')}</span>\n      </label>\n\n      <label>\n        <span>{Texts.text('config-qgen-result-maximum-value')}</span>\n        <select\n          value={config.subtractionQuestionConfig.resultMaxValue}\n          onChange={input => onChange({\n            ...config,\n            subtractionQuestionConfig: {\n              ...config.subtractionQuestionConfig,\n              resultMaxValue: parseInt(input.target.value)\n            }\n          })}\n        >\n          {MAXIMUM_RESULT_VALUE_LIST.map(v =>\n            <option key={v} value={v}>{v}</option>\n          )}\n        </select>\n      </label>\n\n      <label className=\"Label--Checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={config.subtractionQuestionConfig.allowZero}\n          onChange={input => onChange({\n            ...config,\n            subtractionQuestionConfig: {\n              ...config.additionQuestionConfig,\n              allowZero: input.target.checked\n            }\n          })}\n        />\n        <span>{Texts.text('config-qgen-allow-zero')}</span>\n      </label>\n\n\n      <h2>{Texts.text('config-section-title-preview')}</h2>\n\n      <label className=\"Label--Checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={config.showAnswers}\n          onChange={input => onChange({...config, showAnswers: input.target.checked})}\n        />\n        <span>{Texts.text('config-show-answers')}</span>\n      </label>\n\n      <div className=\"Configuration--Buttons\">\n        <button type=\"button\" className=\"Button\" onClick={() => onChange({...config})}>\n          <span className=\"Button--Icon\">⠶</span>\n          <span className=\"Button--Text\">{Texts.text('config-regenerate')}</span>\n        </button>\n        <button type=\"button\" className=\"Button\" onClick={window.print}>\n          <span className=\"Button--Icon\">⎙</span>\n          <span className=\"Button--Text\">{Texts.text('config-print')}</span>\n        </button>\n      </div>\n\n      <p>\n        <Link to='/collection'>{Texts.text('print-collection')}</Link>\n      </p>\n    </form>\n  )\n}\n","import './DifficultyDisplay.scss'\nimport React from 'react'\n\ntype Props = {\n  value: number\n}\n\nexport const DifficultyDisplay = ({value}: Props) => {\n  const list = Array.from({length: 5}).map((_, index) => index < value)\n  return (\n    <div className=\"Difficulty\">\n      {list.map((isOn, index) =>\n        <div key={index} className='Difficulty--Star'>\n          <span>{isOn ? '★' : '☆'}</span>\n        </div>\n      )}\n    </div>\n  )\n}\n","import './DigitsDisplay.scss'\nimport React from 'react'\n\ntype Props = {\n  value: number | string\n  hiddenOnPrint?: boolean\n  hidden?: boolean\n  minLength?: number\n}\n\nexport const DigitsDisplay = ({value, hiddenOnPrint = false, hidden = false, minLength = 1}: Props) => {\n  const caseValue = `${value}`\n  const digits = caseValue.padStart(minLength, ' ').split('')\n  return (\n    <div className=\"Digits\">\n      {digits.map((digit, index) =>\n        <div key={index} className={`Digits--Digit${hiddenOnPrint ? ' Digits--HiddenOnPrint' : ''}${hidden ? ' Digits--Hidden' : ''}`}>\n          <span>{digit}</span>\n        </div>\n      )}\n    </div>\n  )\n}\n","import './PuzzleWordMap.scss'\nimport React from 'react'\nimport {PuzzleImageMap} from '../../generate/PuzzleImageMapper'\nimport {DigitsDisplay} from '../DigitDisplay/DigitsDisplay'\n\ntype Props = {\n  puzzleImageMap: PuzzleImageMap\n  showResults: boolean\n}\n\nexport const PuzzleWordMap = ({puzzleImageMap, showResults}: Props) => {\n  const label = puzzleImageMap.image.label\n  const puzzleWordLetters = label.split('')\n  return (\n    <div className=\"PuzzleWord\">\n      {puzzleWordLetters.map((letter, index) => {\n        const mappedResult = puzzleImageMap.letterToResultMap.get(letter) ?? '?'\n        return (\n          <div key={index} className=\"PuzzleWord--LetterResultPair\">\n            <DigitsDisplay value={mappedResult} />\n            <div className=\"PuzzleWord--MappingArrow\">\n              ➼\n            </div>\n            <DigitsDisplay value={letter} hiddenOnPrint={true} hidden={!showResults}/>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","import './QuestionDisplay.scss'\nimport React from 'react'\nimport {Question} from '../../generate/QuestionGenerator'\nimport {DigitsDisplay} from '../DigitDisplay/DigitsDisplay'\n\ntype Props = {\n  question: Question\n  showResults: boolean\n}\n\nexport const QuestionDisplay = ({question, showResults}: Props) => {\n  const mappedLetterWithRandomFallback = question.mappedLetter ?? ''\n  return (\n    <div className=\"Question\">\n      <div className=\"Question--Operand\">\n        <DigitsDisplay value={question.first} />\n      </div>\n      <div className=\"Question--Operator\">\n        <DigitsDisplay value={question.operator} />\n      </div>\n      <div className=\"Question--Operand\">\n        <DigitsDisplay value={question.second} />\n      </div>\n      <div className=\"Question--Operator\">\n        <DigitsDisplay value=\"=\" />\n      </div>\n      <div className=\"Question--Result\">\n        <DigitsDisplay value={question.result} hiddenOnPrint={true} hidden={!showResults}/>\n      </div>\n      <div className=\"Question--MappingArrow\">\n        ➼\n      </div>\n      <div className=\"Question--MappedLetter\">\n        <DigitsDisplay value={mappedLetterWithRandomFallback}  minLength={1}/>\n      </div>\n    </div>\n  )\n}\n","import './ResponseImageDisplay.scss'\nimport React from 'react'\n\ntype Props = {\n  category: string\n  name: string\n  label: string\n}\n\nexport const ResponseImageDisplay = ({category, name, label}: Props) => {\n  return (\n    <div className=\"ResponseImage\">\n      <div className=\"ResponseImage--CheckImage\">\n        <div />\n        <img src={`${process.env.PUBLIC_URL}/assets/${category}/${name}.svg`} alt={label}/>\n      </div>\n      <div className=\"ResponseImage--Label\">{label}</div>\n    </div>\n  )\n}\n","import './WorkSheetDisplay.scss'\nimport React from 'react'\nimport {DifficultyDisplay} from '../DifficultyDisplay/DifficultyDisplay'\nimport {WorkSheet} from '../../generate/WorksheetGenerator'\nimport {PuzzleWordMap} from '../PuzzleWordMap/PuzzleWordMap'\nimport {QuestionDisplay} from '../QuestionDisplay/QuestionDisplay'\nimport {ResponseImageDisplay} from '../ResponseImageDisplay/ResponseImageDisplay'\nimport {Texts} from '../../Texts'\n\ntype Props = {\n  workSheet: WorkSheet\n}\n\nexport const WorkSheetDisplay = ({workSheet}: Props) => {\n  return (\n    <div className=\"WorkSheet\">\n      <div className=\"WorkSheet--Difficulty\"><DifficultyDisplay value={workSheet.difficulty} /></div>\n      <h1 className=\"WorkSheet--Title\">{Texts.text('worksheet-title')}</h1>\n\n      <p className=\"WorkSheet--Instructions\">{Texts.text('instructions-1')}</p>\n\n      <div className=\"WorkSheet--Questions\">\n        {workSheet.questions.map((question, index) =>\n          <div key={index} className=\"WorkSheet--Question\">\n            <QuestionDisplay question={question} showResults={workSheet.config.showAnswers} />\n          </div>\n        )}\n      </div>\n\n      <p className=\"WorkSheet--Instructions\">{Texts.text('instructions-2')}</p>\n\n      <PuzzleWordMap\n        puzzleImageMap={workSheet.puzzleImageMap}\n        showResults={workSheet.config.showAnswers}\n      />\n\n      <p className=\"WorkSheet--Instructions\">{Texts.text('instructions-3')}</p>\n\n      <div className=\"WorkSheet--Response\">\n        {workSheet.responseImagesSlice.map((image, index) =>\n          <ResponseImageDisplay\n            key={index}\n            category=\"animals\"\n            name={image.name}\n            label={image.label}\n          />\n        )}\n      </div>\n\n      <p className=\"WorkSheet--Attributions\">{Texts.text('attributions')}</p>\n    </div>\n  )\n}\n","import './App.scss';\nimport React, {useEffect, useState} from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport {CollectionDisplay} from './display/CollectionDisplay/CollectionDisplay'\nimport {ConfigurationDisplay} from './display/ConfigurationDisplay/ConfigurationDisplay'\nimport {WorksheetConfig, WorksheetGenerator} from './generate/WorksheetGenerator'\nimport {Texts} from './Texts'\nimport {WorkSheetDisplay} from './display/WorkSheetDisplay/WorkSheetDisplay'\n\nfunction App() {\n  const [config, setConfig] = useState<WorksheetConfig>({\n    locale: 'en',\n    numberOfQuestions: 10,\n    additionQuestionConfig: {\n      enabled: true,\n      resultMaxValue: 10,\n      allowZero: false\n    },\n    subtractionQuestionConfig: {\n      enabled: false,\n      resultMaxValue: 10,\n      allowZero: false\n    },\n    maxTextLength: 4,\n    maxResponseImages: 20,\n    showUppercase: true,\n    showAnswers: false\n  })\n\n  useEffect(() => {\n    document.title = Texts.text('title')\n  }, [config.locale])\n\n  const handleConfigurationOnChange = (config: WorksheetConfig) => {\n    setConfig(config)\n    Texts.locale = config.locale\n  }\n\n  const workSheet = new WorksheetGenerator(config).generate()\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/collection/\">\n            <div className=\"App--Collection\">\n              <CollectionDisplay />\n            </div>\n          </Route>\n          <Route path=\"/\">\n            <div className=\"App--Configuration\">\n              <ConfigurationDisplay config={config} onChange={handleConfigurationOnChange} />\n            </div>\n            <div className=\"App--WorkSheet\">\n              <WorkSheetDisplay workSheet={workSheet} />\n            </div>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}